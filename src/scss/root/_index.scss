@use 'sass:list';
@use 'sass:map';

@forward 'reset';
@forward 'a11y';

$alias: () !default;
$breakpoints: () !default;
$global: () !default;
$tokens: () !default;

@mixin block-components($blockName) {
	@if list.length(map.get($tokens, 'default', 'blocks', $blockName, 'components')) >= 0 {
		@each $name, $value in map.get($tokens, 'default', 'blocks', $blockName, 'components') {
			@if type-of($value) == map {
				@each $a, $b in $value {
					--c-#{$name}-#{$a}: #{$b};
				}
			}
		}
	}
}

@mixin block-properties($blockName) {
	@each $name, $value in map.get($tokens, 'default', 'blocks', $blockName) {
		@if map.has-key($tokens, 'default', 'blocks', $blockName) {
			@if type-of($value) != map {
				#{$name}: block-var($blockName, $name);
			}
		}
	}
}

@mixin component-properties($component) {
	@if map.has-key($tokens, 'default', 'components', $component) {
		@each $name, $value in map.get($tokens, 'default', 'components', $component) {
			#{$name}: component-var($component, $name);
		}
	}
}

@function component-var($component, $item) {
	@return var(--c-#{$component}-#{$item});
}

@function block-var($block, $item) {
	@return var(--b-#{$block}-#{$item});
}

@mixin set-alias($alias, $items) {
	$default-alias: $alias;
	$alias: map.deep-merge($default-alias, $items) !global;
}

@mixin set-components($items) {
	$default-components: $components;
	$components: map.deep-merge($default-components, $items) !global;
}

/* stylelint-disable max-nesting-depth, no-invalid-position-at-import-rule */
:root {
	@each $name, $value in $global {
		--global-#{$name}: #{$value};
	}
	@each $name, $value in $alias {
		--#{$name}: #{$value};
	}
}

@each $breakpoint, $breakpointValue in $breakpoints {
	@media only screen and ($breakpointValue) {
		:root {
			// Alias Tokens
			@each $name, $value in map.get($tokens, $breakpoint, 'alias') {
				--#{$name}: #{$value};
			}
			// Component Tokens
			@each $componentName, $componentItem in map.get($tokens, $breakpoint, 'components') {
				@if list.length($componentItem) == 0 {
					@warn 'Component "#{$componentName}" is configured with no options';
				} @else {
					@if type-of($componentItem) == map {
						@each $componentProperty, $componentValue in $componentItem {
							@if type-of($componentValue) != map {
								--c-#{$componentName}-#{$componentProperty}: #{$componentValue};
							}
						}
					}
				}
			}
			// Block Tokens
			@each $blockName, $blockItem in map.get($tokens, $breakpoint, 'blocks') {
				@if list.length($blockItem) == 0 {
					@warn 'Block "#{$blockName}" is configured with no options';
				} @else {
					@if type-of($blockItem) == map {
						@each $bProperty, $bValue in $blockItem {
							@if type-of($bValue) != map {
								--b-#{$blockName}-#{$bProperty}: #{$bValue};
							}
						}
					}
				}
			}
		}
	}
}
/* stylelint-enable max-nesting-depth */

body {
	@include component-properties('body');
}
