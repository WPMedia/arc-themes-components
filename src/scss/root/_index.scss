@use "sass:list";
@use "sass:map";

@use "reset";
@use "a11y";

//
// Variables
//
$alias: () !default;
$breakpoints: (
	default: "min-width: 0",
) !default;
$global: () !default;
$tokens: () !default;

//
// Always warn if $breakpoints is passed in empty
//
@if list.length($breakpoints) == 0 {
	@warn 'No breakpoints set, using default mobile first approach';
}

//
// Mixins
//
@mixin block-components($blockName) {
	@if list.length(map.get($tokens, "default", "blocks", $blockName, "components")) >= 0 {
		@each $name, $value in map.get($tokens, "default", "blocks", $blockName, "components") {
			@if type-of($value) == map {
				@each $a, $b in $value {
					--c-#{$name}-#{$a}: #{$b};
				}
			}
		}
	}
}

@mixin block-properties($blockName) {
	@each $name, $value in map.get($tokens, "default", "blocks", $blockName) {
		@if map.has-key($tokens, "default", "blocks", $blockName) {
			@if type-of($value) != map {
				#{$name}: block-var($blockName, $name);
			}
		}
	}
}

@mixin component-properties($component) {
	@if map.has-key($tokens, "default", "components", $component) {
		@each $name, $value in map.get($tokens, "default", "components", $component) {
			#{$name}: component-var($component, $name);
		}
	}
}

//
// token-map-to-css-variable
// mixin to output CSS Variable from a token map
//
// $tokens - A map of tokens key values
// $name - The name of the sub map in which to output from
// $prefix - The prefix value to add to the CSS Variable name
//
@mixin token-map-to-css-variable($tokens, $name, $prefix: "t") {
	@each $componentName, $componentItem in map.get($tokens, $name) {
		@if list.length($componentItem) == 0 {
			@warn '#{$name} "#{$componentName}" is configured with no options';
		} @else {
			@if type-of($componentItem) == map {
				@each $componentProperty, $componentValue in $componentItem {
					@if type-of($componentValue) != map {
						--#{$prefix}-#{$componentName}-#{$componentProperty}: #{$componentValue};
					}
				}
			}
		}
	}
}

//
// root-tokens
// mixin to output a set of alias, components and block tokens from a given map
//
// $tokens - A map of tokens that contains the alias, components and blocks maps
//
@mixin root-tokens($tokens: ()) {
	@if list.length($tokens) != 0 {
		:root {
			// Alias Tokens
			@if map.has-key($tokens, "alias") {
				@each $name, $value in map.get($tokens, "alias") {
					--#{$name}: #{$value};
				}
			}

			// Component Tokens
			@include token-map-to-css-variable($tokens, "components", "c");

			// Block Tokens
			@include token-map-to-css-variable($tokens, "blocks", "b");
		}
	}
}

//
// Functions
//
@function component-var($component, $item) {
	@return var(--c-#{$component}-#{$item});
}

@function block-var($block, $item) {
	@return var(--b-#{$block}-#{$item});
}

//
// Start of output of CSS Variables
//
:root {
	@each $name, $value in $global {
		--global-#{$name}: #{$value};
	}
	@each $name, $value in $alias {
		--#{$name}: #{$value};
	}
}

@if list.length($tokens) != 0 {
	@each $breakpoint, $breakpointValue in $breakpoints {
		@media ($breakpointValue) {
			@include root-tokens(map.get($tokens, $breakpoint));
		}
	}
}

body {
	@include component-properties("body");
}
